"Abhi
"Vim: configuration file
" disable vi compatibility (emulation of old bugs)
set nocompatible
" Show file name with path
set laststatus=2
filetype plugin indent on

" Move buffer with Ctrl J and K
map <C-J> :bnext<CR>
map <C-K> :bprev<CR>
nmap ,c :e %<.cc<CR>
nmap ,i :e %<.inl<CR>
nmap ,h :e %<.h<CR>
set mouse=a

" set the runtime path to include Vundle and initialize
 set rtp+=~/.vim/bundle/Vundle.vim
 call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" " let Vundle manage Vundle, required
 Plugin 'VundleVim/Vundle.vim'
 Plugin 'ctrlpvim/ctrlp.vim'
 Plugin 'junegunn/fzf.vim'
 Plugin 'Valloric/YouCompleteMe'
 Plugin 'scrooloose/nerdtree'
 Plugin 'scrooloose/nerdcommenter'
 Plugin 'tpope/vim-fugitive'
 Plugin 'itchyny/lightline.vim'
" " All of your Plugins must be added before the following line
 call vundle#end()            " required

"StatusLine
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
set noshowmode
"set statusline+=%{fugitive#statusline()}
"set statusline+=\ %f
" Fuzzy file searcher setting
set rtp+=~/.fzf
nmap ,p :Files<CR>
imap <c-x><c-l> <plug>(fzf-complete-line)

" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
set ruler
set wildmode=list:longest
" configure tabwidth and insert spaces instead of tabs
set tabstop=2        " tab width is 2 spaces
set shiftwidth=2     " indent also with 2 spaces
set expandtab        " expand tabs to spaces

" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set wrap
set textwidth=80
set colorcolumn=+1
set backspace=indent,eol,start
" turn syntax highlighting on
filetype on
filetype plugin on
filetype indent on
syntax on
set t_Co=256
syntax enable
set background=dark
colorscheme solarized

set wrap linebreak nolist
"Since I'm sloppy with my shift key, :Wq maps to :wq
command W w
command Wq wq
command Q q

" Uses filename regex for searching, not contents (seems to get better results)
let g:ctrlp_regexp = 1
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_clear_cache_on_exit = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.o,*.a,*.zip,*.beam,*/.eunit/*,*.pyc,*/ext/*
set runtimepath^=~/.vim/bundle/ctrlp.vim

"YouCompleteMe
"let g:ycm_register_as_syntastic_checker = 1
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1

let g:ycm_extra_conf_globlist = ['~/foghorn-edgestack/*']
" Use this dummy file to suppress warnings about missing ycm_extra_conf.py
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_auto_trigger = 1
" Only run for C/C++ files
let g:ycm_filetype_whitelist = { 'cpp': 1, 'c': 1, 'h':1, 'hpp':1 }
" Ctrl-backslash invokes auto complete dialog
let g:ycm_key_invoke_completion = '<C-\>'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
nmap <C-f> :YcmCompleter FixIt<CR>

" Ctrl-] jumps to the defn of a symbol - just like in ctags
nmap <C-]> :YcmCompleter GoTo<CR>
" Ctrl-t goes back
"unmap <C-t>
nmap <C-t> <C-o>


" turn line numbers on
set number
" highlight matching braces
set showmatch
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */

"let g:clang_library_path="let g:clang_library_path='/usr/lib/llvm-3.8/lib"

"set tags=./tags,tags;
" Install OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl
set tags+=~/.vim/tags/qt4

"Mappings
map <silent> <C-n> :NERDTreeToggle<CR>

set splitbelow
set splitright
